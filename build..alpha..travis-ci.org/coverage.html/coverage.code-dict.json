{"/home/travis/build/npmtest/node-npmtest-pug-cli/test.js":"/* istanbul instrument in package npmtest_pug_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pug-cli/lib.npmtest_pug_cli.js":"/* istanbul instrument in package npmtest_pug_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pug_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pug_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pug-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pug-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pug_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pug_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pug_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pug_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pug_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pug_cli.__dirname + '/lib.npmtest_pug_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pug-cli/node_modules/pug-cli/index.js":"#!/usr/bin/env node\n\n'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar program = require('commander');\nvar mkdirp = require('mkdirp');\nvar chalk = require('chalk');\nvar pug = require('pug');\n\nvar basename = path.basename;\nvar dirname = path.dirname;\nvar resolve = path.resolve;\nvar normalize = path.normalize;\nvar join = path.join;\nvar relative = path.relative;\n\n// Pug options\n\nvar options = {};\n\n// options\n\nprogram\n  .version(\n    'pug version: '     + require('pug/package.json').version + '\\n' +\n    'pug-cli version: ' + require(  './package.json').version\n  )\n  .usage('[options] [dir|file ...]')\n  .option('-O, --obj <str|path>', 'JSON/JavaScript options object or file')\n  .option('-o, --out <dir>', 'output the rendered HTML or compiled JavaScript to <dir>')\n  .option('-p, --path <path>', 'filename used to resolve includes')\n  .option('-b, --basedir <path>', 'path used as root directory to resolve absolute includes')\n  .option('-P, --pretty', 'compile pretty HTML output')\n  .option('-c, --client', 'compile function for client-side')\n  .option('-n, --name <str>', 'the name of the compiled template (requires --client)')\n  .option('-D, --no-debug', 'compile without debugging (smaller functions)')\n  .option('-w, --watch', 'watch files for changes and automatically re-render')\n  .option('-E, --extension <ext>', 'specify the output file extension')\n  .option('-s, --silent', 'do not output logs')\n  .option('--name-after-file', 'name the template after the last section of the file path (requires --client and overriden by --name)')\n  .option('--doctype <str>', 'specify the doctype on the command line (useful if it is not specified by the template)')\n\n\nprogram.on('--help', function(){\n  console.log('  Examples:');\n  console.log('');\n  console.log('    # Render all files in the `templates` directory:');\n  console.log('    $ pug templates');\n  console.log('');\n  console.log('    # Create {foo,bar}.html:');\n  console.log('    $ pug {foo,bar}.pug');\n  console.log('');\n  console.log('    # Using `pug` over standard input and output streams');\n  console.log('    $ pug < my.pug > my.html');\n  console.log('    $ echo \\'h1 Pug!\\' | pug');\n  console.log('');\n  console.log('    # Render all files in `foo` and `bar` directories to `/tmp`:');\n  console.log('    $ pug foo bar --out /tmp');\n  console.log('');\n  console.log('    # Specify options through a string:');\n  console.log('    $ pug -O \\'{\"doctype\": \"html\"}\\' foo.pug');\n  console.log('    # or, using JavaScript instead of JSON');\n  console.log('    $ pug -O \"{doctype: \\'html\\'}\" foo.pug');\n  console.log('');\n  console.log('    # Specify options through a file:');\n  console.log('    $ echo \"exports.doctype = \\'html\\';\" > options.js');\n  console.log('    $ pug -O options.js foo.pug');\n  console.log('    # or, JSON works too');\n  console.log('    $ echo \\'{\"doctype\": \"html\"}\\' > options.json');\n  console.log('    $ pug -O options.json foo.pug');\n  console.log('');\n});\n\nprogram.parse(process.argv);\n\n// options given, parse them\n\nif (program.obj) {\n  options = parseObj(program.obj);\n}\n\n/**\n * Parse object either in `input` or in the file called `input`. The latter is\n * searched first.\n */\nfunction parseObj (input) {\n  try {\n    return require(path.resolve(input));\n  } catch (e) {\n    var str;\n    try {\n      str = fs.readFileSync(program.obj, 'utf8');\n    } catch (e) {\n      str = program.obj;\n    }\n    try {\n      return JSON.parse(str);\n    } catch (e) {\n      return eval('(' + str + ')');\n    }\n  }\n}\n\n[\n  ['path', 'filename'],      // --path\n  ['debug', 'compileDebug'], // --no-debug\n  ['client', 'client'],      // --client\n  ['pretty', 'pretty'],      // --pretty\n  ['basedir', 'basedir'],    // --basedir\n  ['doctype', 'doctype'],    // --doctype\n].forEach(function (o) {\n  options[o[1]] = program[o[0]] !== undefined ? program[o[0]] : options[o[1]];\n});\n\n// --name\n\nif (typeof program.name === 'string') {\n  options.name = program.name;\n}\n\n// --silent\n\nvar consoleLog = program.silent ? function() {} : console.log;\n\n// left-over args are file paths\n\nvar files = program.args;\n\n// object of reverse dependencies of a watched file, including itself if\n// applicable\n\nvar watchList = {};\n\n// function for rendering\nvar render = program.watch ? tryRender : renderFile;\n\n// compile files\n\nif (files.length) {\n  consoleLog();\n  if (program.watch) {\n    process.on('SIGINT', function() {\n      process.exit(1);\n    });\n  }\n  files.forEach(function (file) {\n    render(file);\n  });\n// stdio\n} else {\n  stdin();\n}\n\n/**\n * Watch for changes on path\n *\n * Renders `base` if specified, otherwise renders `path`.\n */\nfunction watchFile(path, base, rootPath) {\n  path = normalize(path);\n\n  var log = '  ' + chalk.gray('watching') + ' ' + chalk.cyan(path);\n  if (!base) {\n    base = path;\n  } else {\n    base = normalize(base);\n    log += '\\n    ' + chalk.gray('as a dependency of') + ' ';\n    log += chalk.cyan(base);\n  }\n\n  if (watchList[path]) {\n    if (watchList[path].indexOf(base) !== -1) return;\n    consoleLog(log);\n    watchList[path].push(base);\n    return;\n  }\n\n  consoleLog(log);\n  watchList[path] = [base];\n  fs.watchFile(path, {persistent: true, interval: 200},\n               function (curr, prev) {\n    // File doesn't exist anymore. Keep watching.\n    if (curr.mtime.getTime() === 0) return;\n    // istanbul ignore if\n    if (curr.mtime.getTime() === prev.mtime.getTime()) return;\n    watchList[path].forEach(function(file) {\n      tryRender(file, rootPath);\n    });\n  });\n}\n\n/**\n * Convert error to string\n */\nfunction errorToString(e) {\n  return e.stack || /* istanbul ignore next */ (e.message || e);\n}\n\n/**\n * Try to render `path`; if an exception is thrown it is printed to stderr and\n * otherwise ignored.\n *\n * This is used in watch mode.\n */\nfunction tryRender(path, rootPath) {\n  try {\n    renderFile(path, rootPath);\n  } catch (e) {\n    // keep watching when error occured.\n    console.error(errorToString(e));\n  }\n}\n\n/**\n * Compile from stdin.\n */\n\nfunction stdin() {\n  var buf = '';\n  process.stdin.setEncoding('utf8');\n  process.stdin.on('data', function(chunk){ buf += chunk; });\n  process.stdin.on('end', function(){\n    var output;\n    if (options.client) {\n      output = pug.compileClient(buf, options);\n    } else {\n      var fn = pug.compile(buf, options);\n      var output = fn(options);\n    }\n    process.stdout.write(output);\n  }).resume();\n}\n\n/**\n * Process the given path, compiling the pug files found.\n * Always walk the subdirectories.\n *\n * @param path      path of the file, might be relative\n * @param rootPath  path relative to the directory specified in the command\n */\n\nfunction renderFile(path, rootPath) {\n  var re = /\\.(?:pug|jade)$/;\n  var stat = fs.lstatSync(path);\n  // Found pug file\n  if (stat.isFile() && re.test(path)) {\n    // Try to watch the file if needed. watchFile takes care of duplicates.\n    if (program.watch) watchFile(path, null, rootPath);\n    if (program.nameAfterFile) {\n      options.name = getNameFromFileName(path);\n    }\n    var fn = options.client\n           ? pug.compileFileClient(path, options)\n           : pug.compileFile(path, options);\n    if (program.watch && fn.dependencies) {\n      // watch dependencies, and recompile the base\n      fn.dependencies.forEach(function (dep) {\n        watchFile(dep, path, rootPath);\n      });\n    }\n\n    // --extension\n    var extname;\n    if (program.extension)   extname = '.' + program.extension;\n    else if (options.client) extname = '.js';\n    else                     extname = '.html';\n\n    // path: foo.pug -> foo.<ext>\n    path = path.replace(re, extname);\n    if (program.out) {\n      // prepend output directory\n      if (rootPath) {\n        // replace the rootPath of the resolved path with output directory\n        path = relative(rootPath, path);\n      } else {\n        // if no rootPath handling is needed\n        path = basename(path);\n      }\n      path = resolve(program.out, path);\n    }\n    var dir = resolve(dirname(path));\n    mkdirp.sync(dir);\n    var output = options.client ? fn : fn(options);\n    fs.writeFileSync(path, output);\n    consoleLog('  ' + chalk.gray('rendered') + ' ' + chalk.cyan('%s'), normalize(path));\n  // Found directory\n  } else if (stat.isDirectory()) {\n    var files = fs.readdirSync(path);\n    files.map(function(filename) {\n      return path + '/' + filename;\n    }).forEach(function (file) {\n      render(file, rootPath || path);\n    });\n  }\n}\n\n/**\n * Get a sensible name for a template function from a file path\n *\n * @param {String} filename\n * @returns {String}\n */\nfunction getNameFromFileName(filename) {\n  var file = basename(filename).replace(/\\.(?:pug|jade)$/, '');\n  return file.toLowerCase().replace(/[^a-z0-9]+([a-z])/g, function (_, character) {\n    return character.toUpperCase();\n  }) + 'Template';\n}\n"}